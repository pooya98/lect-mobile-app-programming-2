


/* Swift 프로그래밍 2장. 데이터타입과 연산자 */



    // 2.1 기본 코드 작성 방법

        // 소스코드
            // - 단일 파일
            // - 확장자 : '.swift'
    

        // 문장 작성
            // - 세미콜론 생략 가능
            // - 여러 문장을 한 줄로 작성 때는 필요함.


        // 프레임워크 사용
            // - 'import [프레임워크명]'


        // 다른 소스 코드
            // - 모듈(프로젝트) 단위로 로딩
            // - 하나의 프로젝트 = 하나의 모듈
            // - 동일한 모듈 내 소스 코드 간에는 include/import 불필요
            // - 서로 다른 모듈의 소스 코드 간에는 include/import 필요

        // main
            // - main 함수 없음
            // - main.swift 자체가 main 함수의 역할을 수행함.
            // - main.swift 파일의 top영역에 작성한 코드가 main함수의 내용



        // 콘솔에 정보 출력
            // - print() 함수를 통해 출력
            // - 콤마[,]를 통해 다수의 값 출력 가능
            // - String Interpolation(문자열 보간) : 출력하려는 문자열 내에 [\()] 기호를 사용하여, 괄호 안에 있는 수식을 계산하여 그 결과 값을 String으로
            //                                      변환해서 괄호의 위치에 포함시킨다.


var greeting = "Swift"
print()
print("Hello,\(greeting)")  // '\()' : 평가 결과 출력



    // 2.2 변수와 상수

        // 변수 (var)
            // - 타입 추론(Type Inference) 가능
            // - 타입 정보가 있으면 타입 선언 생략 가능
            // - 타입 정보가 없으면 타입 선언 생략 불가
            
var i = 1
var f : Float = 1.1
i = 3

            // - 타입 선언 관련 자주 접하는 에러
                    // (1) 타입 대입 에러

var var1 = 10
// var1 = 1.1   // 에러발생

                    // (2) 타입 혼합 에러

var intVal = 1
var doubleVal = 1.2

// var ret = intVal + doubleVal     // 에러 발생


        // 상수 (let)
let constant = 123

            // - 변수 선언과 초기값 대입 분리 가능, but 분리 시 타입 선언 생략 불가
            // - 자동 초기화 안됨. 초기화 전에 사용하면 에러


    // 2.3 연산자

        // 산술 연산자
            // - [+, -, *, /, %] (이항)
            // - [+, -] (단항)
            // - 단항 증감 연산자 사용 불가능 -> 복합 대입 연산자를 대신해서 사용
            // - 연산자와 피연산자 사이 공백 주의 (공백 잘못 사용시, 산술 이항 연산자를 산술 단항 연산자로 인식할 수도 있음.)


        // 복합 대입 연산자
            // - [+=, -=, *=, /=, %=]


        // 비교 연산자
            // - [==, !=, <, >, <=, >=, ===]
            // - [===] : 레퍼런스 타입에만 사용됨. 같은 주소를 가진 객체인지 확인할 때 사용함.


        // 3항 연산자
            // - [(비교식) ? (true expression) : (false expression)]


        // 범위 연산자
            // - 닫힌 범위 : 1...10 (1에서 10까지)
            // - 반 닫힌 범위 : 1..<10 (1에서 9까지)


        // 논리 연산자
            // - [&&, ||, !]


        // nil 연산자
            // - nil-coalescing 연산자(??) : nil 관련된 연산자
                // - value = optionalValue ?? defaultValue
                // - ?? 연산자는 nil이 아니면 unwrapping, nil이면 defaultValue



    // 2.4 기본 데이터 타입
        
        // * Swift의 기본 데이터 타입은 Structure로 정의되어 있다.
        // * Swift에서는 Class, Structure 모두 Initializer(생성자)가 있다.

        // - Bool, Int, UInt(부호 없는 정수), Float, Double, Character, String
        // - 크기에 따른 정수형 타입 : Int8, Int16, Int32, Int64, UInt8, ...
        // - 값의 범위 : Int.max, Int.min

        // - Swift는 타입에 대해 매우 깐깐함.
        // - 타입 변환 가능 : 변환할타입(변환될타입)
        // - 실수 타입의 기본 타입은 Double

        // - 타입 정보 얻기 : type(of: Val)
